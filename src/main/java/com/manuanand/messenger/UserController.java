package com.manuanand.messenger;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private MessageRepository messageRepository;
	
	///
	// User Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody User addUser (
			@RequestParam String name, @RequestParam String email, 
			@RequestParam String password, @RequestParam (required = false) Boolean isPremiumCustomer) {

		User newUser = new User();
		newUser.setName(name);
		newUser.setEmail(email);
		newUser.setPassword(password);
		
		if (isPremiumCustomer != null) {
			newUser.setIsPremiumCustomer(isPremiumCustomer);
		} else {
			newUser.setIsPremiumCustomer(Boolean.FALSE);
		}
		
		userRepository.save(newUser);
		
		return newUser;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<User> getAllUsers() {
		
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody User getSpecificUser(@PathVariable String id) {
		
		Integer userId = null;
		try {
			userId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<User> user = userRepository.findById(userId);
		if (!user.isEmpty()) {
			return user.get();
		} 

		return null;
	}
	
	@PostMapping(path="/message/send") // Map ONLY POST Requests
	public @ResponseBody Message uploadMessage (
			@RequestParam Integer fromUserId, @RequestParam String password,
			@RequestParam Integer toUserId, 
			@RequestParam String message ) {
	
		// Validate user ID
		Optional<User> user = userRepository.findById(fromUserId);
		if (user.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + fromUserId + " not found");
		} else if (!user.get().getPassword().equals(password))  {
			throw new ResponseStatusException(
					  HttpStatus.INTERNAL_SERVER_ERROR, "Password mismatched for User ID" + fromUserId);
		}
		
		Optional<User> toUser = userRepository.findById(toUserId);
		if (toUser.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + toUserId + " not found");
		} 
		
		Message newMessage = new Message();
		newMessage.setFromUserId(fromUserId);
		newMessage.setToUserId(toUserId);
		newMessage.setText(message);
		newMessage.setDate(new Date());
		newMessage.setStatus(MessageStatus.CREATED);
		
		messageRepository.save(newMessage);
		
		return newMessage;
	}
}